version: 0.2

# run-as: Linux-user-name

# env:
#   shell: shell-tag
#   variables:
#     key: "value"
#     key: "value"
#   parameter-store:
#     key: "value"
#     key: "value"
#   exported-variables:
#     - variable
#     - variable
#   secrets-manager:
#     key: secret-id:json-key:version-stage:version-id
#   git-credential-helper: no | yes

# proxy:
#   upload-artifacts: no | yes
#   logs: no | yes

# batch:
#   fast-fail: false | true
#   # build-list:
#   # build-matrix:
#   # build-graph:
        
phases:
  install:
    # run-as: Linux-user-name
    on-failure: ABORT | CONTINUE
    runtime-versions:
      php: 8.2
      nodejs: 18.x
    #   runtime: version
    #   runtime: version
    commands:
      - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      - php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
      - php composer-setup.php
      - php -r "unlink('composer-setup.php');"
      - sudo mv composer.phar /usr/local/bin/composer
    # finally:
    #   - command
    #   - command
    # # steps:
  pre_build:
    # run-as: Linux-user-name
    on-failure: ABORT | CONTINUE
    commands:
     - cp .env.example .env
     #Retreiving STRIPE LIVE CREDENTIALS
     - aws secretsmanager get-secret-value --secret-id prod/rv-tampa/stripe-credentials --query SecretString --output text > secretsSTRIPE.json
     - export $(jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" secretsSTRIPE.json)
     - sed -i "s#YOUR_STRIPE_PUBLISHABLE_KEY#$STRIPE_PUBLISHABLE_KEY#" .env
     - sed -i "s#YOUR_STRIPE_SECRET_KEY#$STRIPE_SECRET_KEY#" .env
     #Retreiving STRIPE TEST CREDENTIALS
     # - aws secretsmanager get-secret-value --secret-id test/rv-tampa/stripe-credentials --query SecretString --output text > secretsSTRIPE.json
     # - export $(jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" secretsSTRIPE.json)
     # - sed -i "s#YOUR_STRIPE_PUBLISHABLE_KEY#$STRIPE_PUBLISHABLE_KEY#" .env
     # - sed -i "s#YOUR_STRIPE_SECRET_KEY#$STRIPE_SECRET_KEY#" .env
     #Retreiving AWS CREDENTIALS
     - aws secretsmanager get-secret-value --secret-id prod/rv-tampa/aws-credentials --query SecretString --output text > secretsAWS.json
     - export $(jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" secretsAWS.json)
     - sed -i "s#YOUR_ACCESS_KEY_ID#$AWS_ACCESS_KEY_ID#" .env
     - sed -i "s#YOUR_SECRET_ACCESS_KEY#$AWS_SECRET_ACCESS_KEY#" .env
     - composer install
     - npm install
    finally:
      # - php artisan optimize
      # - command
    # steps:
  build:
    # run-as: Linux-user-name
    on-failure: ABORT | CONTINUE
    commands:
      - npm run build
      - php artisan key:generate
      # - php artisan config:cache
      # - php artisan optimize
      - php artisan migrate
    # finally:
    #   - command
    #   - command
    # steps:
  post_build:
    run-as: root
    on-failure: ABORT | CONTINUE
    commands:
      - php artisan optimize
    # finally:
    #   - command
    #   - command
    # steps:
# reports:
#   report-group-name-or-arn:
#     files:
#       - location
#       - location
#     base-directory: location
#     discard-paths: no | yes
#     file-format: report-format
artifacts:
  # type: zip
  files:
    # - my-build.zip
    # - '**/*'
#     - location
    - '**/*'
    - 'buildspec.yml'
    - '!storage/**/*.php'  # Exclude cached files in storage directory
    - '!bootstrap/cache/**/*'
  name: $(date +%Y-%m-%dT%H:%M:%S).zip
#   discard-paths: no | yes
#   base-directory: location
#   exclude-paths: excluded paths
#   enable-symlinks: no | yes
#   s3-prefix: prefix
#   secondary-artifacts:
#     artifactIdentifier:
#       files:
#         - location
#         - location
#       name: secondary-artifact-name
#       discard-paths: no | yes
#       base-directory: location
#     artifactIdentifier:
#       files:
#         - location
#         - location
#       discard-paths: no | yes
#       base-directory: location

  cache:
    paths:
      - vendor/    # Cache the Composer dependencies
      - node_modules/  # Cache the Node.js dependencies
